Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> commande
Rule 1     commande -> bouger commande
Rule 2     commande -> bouger
Rule 3     commande -> attendre commande
Rule 4     commande -> attendre
Rule 5     commande -> toucher commande
Rule 6     commande -> toucher
Rule 7     commande -> scroller commande
Rule 8     commande -> scroller
Rule 9     bouger -> move lbracket digit separator digit rbracket
Rule 10    toucher -> touch lbracket rbracket
Rule 11    toucher -> touch
Rule 12    attendre -> wait lbracket digit rbracket
Rule 13    scroller -> scroll lbracket digit separator digit separator digit separator digit rbracket

Terminals, with rules where they appear

digit                : 9 9 12 13 13 13 13
error                : 
lbracket             : 9 10 12 13
move                 : 9
rbracket             : 9 10 12 13
scroll               : 13
separator            : 9 13 13 13
touch                : 10 11
wait                 : 12

Nonterminals, with rules where they appear

attendre             : 3 4
bouger               : 1 2
commande             : 1 3 5 7 0
scroller             : 7 8
toucher              : 5 6

Parsing method: LALR

state 0

    (0) S' -> . commande
    (1) commande -> . bouger commande
    (2) commande -> . bouger
    (3) commande -> . attendre commande
    (4) commande -> . attendre
    (5) commande -> . toucher commande
    (6) commande -> . toucher
    (7) commande -> . scroller commande
    (8) commande -> . scroller
    (9) bouger -> . move lbracket digit separator digit rbracket
    (12) attendre -> . wait lbracket digit rbracket
    (10) toucher -> . touch lbracket rbracket
    (11) toucher -> . touch
    (13) scroller -> . scroll lbracket digit separator digit separator digit separator digit rbracket

    move            shift and go to state 3
    wait            shift and go to state 9
    touch           shift and go to state 6
    scroll          shift and go to state 8

    toucher                        shift and go to state 1
    bouger                         shift and go to state 4
    attendre                       shift and go to state 7
    commande                       shift and go to state 5
    scroller                       shift and go to state 2

state 1

    (5) commande -> toucher . commande
    (6) commande -> toucher .
    (1) commande -> . bouger commande
    (2) commande -> . bouger
    (3) commande -> . attendre commande
    (4) commande -> . attendre
    (5) commande -> . toucher commande
    (6) commande -> . toucher
    (7) commande -> . scroller commande
    (8) commande -> . scroller
    (9) bouger -> . move lbracket digit separator digit rbracket
    (12) attendre -> . wait lbracket digit rbracket
    (10) toucher -> . touch lbracket rbracket
    (11) toucher -> . touch
    (13) scroller -> . scroll lbracket digit separator digit separator digit separator digit rbracket

    $end            reduce using rule 6 (commande -> toucher .)
    move            shift and go to state 3
    wait            shift and go to state 9
    touch           shift and go to state 6
    scroll          shift and go to state 8

    attendre                       shift and go to state 7
    bouger                         shift and go to state 4
    toucher                        shift and go to state 1
    commande                       shift and go to state 10
    scroller                       shift and go to state 2

state 2

    (7) commande -> scroller . commande
    (8) commande -> scroller .
    (1) commande -> . bouger commande
    (2) commande -> . bouger
    (3) commande -> . attendre commande
    (4) commande -> . attendre
    (5) commande -> . toucher commande
    (6) commande -> . toucher
    (7) commande -> . scroller commande
    (8) commande -> . scroller
    (9) bouger -> . move lbracket digit separator digit rbracket
    (12) attendre -> . wait lbracket digit rbracket
    (10) toucher -> . touch lbracket rbracket
    (11) toucher -> . touch
    (13) scroller -> . scroll lbracket digit separator digit separator digit separator digit rbracket

    $end            reduce using rule 8 (commande -> scroller .)
    move            shift and go to state 3
    wait            shift and go to state 9
    touch           shift and go to state 6
    scroll          shift and go to state 8

    toucher                        shift and go to state 1
    bouger                         shift and go to state 4
    attendre                       shift and go to state 7
    commande                       shift and go to state 11
    scroller                       shift and go to state 2

state 3

    (9) bouger -> move . lbracket digit separator digit rbracket

    lbracket        shift and go to state 12


state 4

    (1) commande -> bouger . commande
    (2) commande -> bouger .
    (1) commande -> . bouger commande
    (2) commande -> . bouger
    (3) commande -> . attendre commande
    (4) commande -> . attendre
    (5) commande -> . toucher commande
    (6) commande -> . toucher
    (7) commande -> . scroller commande
    (8) commande -> . scroller
    (9) bouger -> . move lbracket digit separator digit rbracket
    (12) attendre -> . wait lbracket digit rbracket
    (10) toucher -> . touch lbracket rbracket
    (11) toucher -> . touch
    (13) scroller -> . scroll lbracket digit separator digit separator digit separator digit rbracket

    $end            reduce using rule 2 (commande -> bouger .)
    move            shift and go to state 3
    wait            shift and go to state 9
    touch           shift and go to state 6
    scroll          shift and go to state 8

    toucher                        shift and go to state 1
    bouger                         shift and go to state 4
    attendre                       shift and go to state 7
    commande                       shift and go to state 13
    scroller                       shift and go to state 2

state 5

    (0) S' -> commande .



state 6

    (10) toucher -> touch . lbracket rbracket
    (11) toucher -> touch .

    lbracket        shift and go to state 14
    move            reduce using rule 11 (toucher -> touch .)
    wait            reduce using rule 11 (toucher -> touch .)
    touch           reduce using rule 11 (toucher -> touch .)
    scroll          reduce using rule 11 (toucher -> touch .)
    $end            reduce using rule 11 (toucher -> touch .)


state 7

    (3) commande -> attendre . commande
    (4) commande -> attendre .
    (1) commande -> . bouger commande
    (2) commande -> . bouger
    (3) commande -> . attendre commande
    (4) commande -> . attendre
    (5) commande -> . toucher commande
    (6) commande -> . toucher
    (7) commande -> . scroller commande
    (8) commande -> . scroller
    (9) bouger -> . move lbracket digit separator digit rbracket
    (12) attendre -> . wait lbracket digit rbracket
    (10) toucher -> . touch lbracket rbracket
    (11) toucher -> . touch
    (13) scroller -> . scroll lbracket digit separator digit separator digit separator digit rbracket

    $end            reduce using rule 4 (commande -> attendre .)
    move            shift and go to state 3
    wait            shift and go to state 9
    touch           shift and go to state 6
    scroll          shift and go to state 8

    toucher                        shift and go to state 1
    bouger                         shift and go to state 4
    attendre                       shift and go to state 7
    commande                       shift and go to state 15
    scroller                       shift and go to state 2

state 8

    (13) scroller -> scroll . lbracket digit separator digit separator digit separator digit rbracket

    lbracket        shift and go to state 16


state 9

    (12) attendre -> wait . lbracket digit rbracket

    lbracket        shift and go to state 17


state 10

    (5) commande -> toucher commande .

    $end            reduce using rule 5 (commande -> toucher commande .)


state 11

    (7) commande -> scroller commande .

    $end            reduce using rule 7 (commande -> scroller commande .)


state 12

    (9) bouger -> move lbracket . digit separator digit rbracket

    digit           shift and go to state 18


state 13

    (1) commande -> bouger commande .

    $end            reduce using rule 1 (commande -> bouger commande .)


state 14

    (10) toucher -> touch lbracket . rbracket

    rbracket        shift and go to state 19


state 15

    (3) commande -> attendre commande .

    $end            reduce using rule 3 (commande -> attendre commande .)


state 16

    (13) scroller -> scroll lbracket . digit separator digit separator digit separator digit rbracket

    digit           shift and go to state 20


state 17

    (12) attendre -> wait lbracket . digit rbracket

    digit           shift and go to state 21


state 18

    (9) bouger -> move lbracket digit . separator digit rbracket

    separator       shift and go to state 22


state 19

    (10) toucher -> touch lbracket rbracket .

    move            reduce using rule 10 (toucher -> touch lbracket rbracket .)
    wait            reduce using rule 10 (toucher -> touch lbracket rbracket .)
    touch           reduce using rule 10 (toucher -> touch lbracket rbracket .)
    scroll          reduce using rule 10 (toucher -> touch lbracket rbracket .)
    $end            reduce using rule 10 (toucher -> touch lbracket rbracket .)


state 20

    (13) scroller -> scroll lbracket digit . separator digit separator digit separator digit rbracket

    separator       shift and go to state 23


state 21

    (12) attendre -> wait lbracket digit . rbracket

    rbracket        shift and go to state 24


state 22

    (9) bouger -> move lbracket digit separator . digit rbracket

    digit           shift and go to state 25


state 23

    (13) scroller -> scroll lbracket digit separator . digit separator digit separator digit rbracket

    digit           shift and go to state 26


state 24

    (12) attendre -> wait lbracket digit rbracket .

    move            reduce using rule 12 (attendre -> wait lbracket digit rbracket .)
    wait            reduce using rule 12 (attendre -> wait lbracket digit rbracket .)
    touch           reduce using rule 12 (attendre -> wait lbracket digit rbracket .)
    scroll          reduce using rule 12 (attendre -> wait lbracket digit rbracket .)
    $end            reduce using rule 12 (attendre -> wait lbracket digit rbracket .)


state 25

    (9) bouger -> move lbracket digit separator digit . rbracket

    rbracket        shift and go to state 27


state 26

    (13) scroller -> scroll lbracket digit separator digit . separator digit separator digit rbracket

    separator       shift and go to state 28


state 27

    (9) bouger -> move lbracket digit separator digit rbracket .

    move            reduce using rule 9 (bouger -> move lbracket digit separator digit rbracket .)
    wait            reduce using rule 9 (bouger -> move lbracket digit separator digit rbracket .)
    touch           reduce using rule 9 (bouger -> move lbracket digit separator digit rbracket .)
    scroll          reduce using rule 9 (bouger -> move lbracket digit separator digit rbracket .)
    $end            reduce using rule 9 (bouger -> move lbracket digit separator digit rbracket .)


state 28

    (13) scroller -> scroll lbracket digit separator digit separator . digit separator digit rbracket

    digit           shift and go to state 29


state 29

    (13) scroller -> scroll lbracket digit separator digit separator digit . separator digit rbracket

    separator       shift and go to state 30


state 30

    (13) scroller -> scroll lbracket digit separator digit separator digit separator . digit rbracket

    digit           shift and go to state 31


state 31

    (13) scroller -> scroll lbracket digit separator digit separator digit separator digit . rbracket

    rbracket        shift and go to state 32


state 32

    (13) scroller -> scroll lbracket digit separator digit separator digit separator digit rbracket .

    move            reduce using rule 13 (scroller -> scroll lbracket digit separator digit separator digit separator digit rbracket .)
    wait            reduce using rule 13 (scroller -> scroll lbracket digit separator digit separator digit separator digit rbracket .)
    touch           reduce using rule 13 (scroller -> scroll lbracket digit separator digit separator digit separator digit rbracket .)
    scroll          reduce using rule 13 (scroller -> scroll lbracket digit separator digit separator digit separator digit rbracket .)
    $end            reduce using rule 13 (scroller -> scroll lbracket digit separator digit separator digit separator digit rbracket .)

